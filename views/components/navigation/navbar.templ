package navigation

import "github.com/nosvagor/hgmx-builder/views/shared"

type NavbarProps struct {
	App        string
	InnerLinks []PageLink
	Links      []PageLink
	CTA        *PageLink
	Account    []PageLink
}

type PageLink struct {
	Label string
	URL   templ.SafeURL
}

templ Navbar(p *NavbarProps) {
	@shared.Script(&shared.ScriptProps{Path: "motion/navbar.js", Module: true, Defer: true})
	<navbar
		class="sticky top-0 z-50 flex items-center justify-between gap-4 px-8 py-3 transition duration-200 ease-out"
		_="
			init
				if window.scrollY is 0 then
					remove .navbar_scrolling from me
				else
					add .navbar_scrolling to me
					call window.navbarScrolling(true)
				end
			end

			on scroll from window	
				get #navMenu
				if it and it.matches('.menu-open') then
					exit
				end
				if window.scrollY is 0 and me.matches('.navbar_scrolling') then
					remove .navbar_scrolling from me
					call window.navbarScrolling(false)
				else if window.scrollY > 0 and not me.matches('.navbar_scrolling') then
					add .navbar_scrolling to me
					call window.navbarScrolling(true)
				end
			end
		"
	>
		<div class="flex items-center gap-4">
			@Brand(p)
			if p.CTA != nil {
				@CTA(p)
			}
		</div>
		<div class="flex items-center gap-4">
			@TelescopeTrigger(p)
			@Bookmarks(p)
			@NavMenu(p)
		</div>
	</navbar>
	@ExpandedNavMenu(p)
	@Telescope(nil)
}

templ Brand(p *NavbarProps) {
	<brand
		class="text-lg font-semibold tracking-tight font-display"
	>
		<a href="/" class="transition-colors hover:text-primary-400">
			{ p.App }
		</a>
	</brand>
}

templ TelescopeTrigger(p *NavbarProps) {
	<telescopeTrigger
		type="button"
		role="button"
		tabindex="0"
		class="items-center flex justify-between w-20 pl-2 pr-6 py-1 text-xs rounded-lg transition-colors outline-none cursor-pointer bg-base-600 text-secondary-601 hover:text-primary-401"
		_="
			on click
				halt the event
				send telescope:open
			end
		"
	>
		<svg class="min-w-4 h-4 mr-1.5" viewBox="0 0 24 24" fill="currentColor">
			<rect x="6" y="9" width="8" height="4" rx="1" transform="rotate(-25 10 11)"></rect>
			<rect x="2" y="12.5" width="3" height="3" rx="1" transform="rotate(-25 3.5 13)"></rect>
			<rect x="15" y="5" width="4" height="6" rx="2" transform="rotate(-25 17 9)"></rect>
			<rect x="8.5" y="14" width="1.5" height="6" rx="0.75" transform="rotate(20 9.25 17)"></rect>
			<rect x="13" y="13" width="1.5" height="7" rx="0.75" transform="rotate(-20 13.75 17)"></rect>
		</svg>
		<kbd
			class="text-[0.8em]"
			_="
				init
					if navigator.platform.toUpperCase().indexOf('MAC') >= 0
						put 'âŒ˜K' into me
					else
						put 'Ctrl+K' into me
					end
				end
				on click
					halt the event
					send telescope:open
				end
				on keydown[metaKey and key is 'k'] from window
					halt the event
					send telescope:open
				end
				on keydown[ctrlKey and key is 'k'] from window
					halt the event
					send telescope:open
				end
			"
		>Ctrl+K</kbd>
	</telescopeTrigger>
}

templ Bookmarks(p *NavbarProps) {
	<bookmarks class="flex items-center overflow-hidden font-medium font-display">
		for _, link := range p.Links {
			<bookmark hx-get={ link.URL } tabindex="0" class="ml-3 cursor-pointer bookmark_item whitespace-nowrap hover:text-primary-401 first:ml-0">
				{ link.Label }
			</bookmark>
		}
	</bookmarks>
}

templ NavMenu(p *NavbarProps) {
	<navMenu
		id="navMenu"
		tabindex="0"
		class="relative w-10 h-10 rounded-full outline-none cursor-pointer centered bg-base-600 text-secondary-601 hover:text-primary-401"
		_="
		on click or keydown[key is 'Enter' or key is ' ']
			halt the event
			toggle .menu-open on me
			call window.toggleMenu()
		end

		on click from elsewhere
			if me.matches('.menu-open')
				remove .menu-open from me
				call window.toggleMenu()
			end
		end

		on keydown[key is 'Escape'] from window
			if me.matches('.menu-open')
				remove .menu-open from me
				call window.toggleMenu()
				exit
			end

			if not window.__lastEscapeTime then set window.__lastEscapeTime to 0 end
			set now to Date.now()
			if now - window.__lastEscapeTime < 400
				add .menu-open to me
				call window.toggleMenu()
				set window.__lastEscapeTime to 0
			else
				set window.__lastEscapeTime to now
			end
		end
	"
	>
		<svg viewBox="0 0 32 32" class="w-6 h-6 overflow-visible">
			<path id="icon-p1" stroke="currentColor" stroke-width="2" stroke-linecap="round" fill="none" d="M 9,8 C 9,0, 23,0, 23,8"></path>
			<path id="icon-p2" stroke="currentColor" stroke-width="2" stroke-linecap="round" fill="none" d="M 9,8 C 9,16, 23,16, 23,8"></path>
			<path id="icon-p3" stroke="currentColor" stroke-width="2" stroke-linecap="round" fill="none" d="M 6,26 C 6,18, 26,18, 26,26"></path>
		</svg>
	</navMenu>
}

templ ExpandedNavMenu(p *NavbarProps) {
	<expandedNavMenu id="expandedNavMenu" class="fixed inset-0 z-40 pointer-events-none">
		<div id="menu-backdrop" class="absolute inset-0 opacity-0 bg-black/25"></div>
		<div id="menu-bg" class="absolute top-0 -right-10 flex flex-col justify-between h-full p-10 pr-20 pt-16 pb-8 shadow-2xl min-w-fit bg-base-600" style="transform: translateX(100%)">
			<div class="flex flex-col items-end gap-4">
				if len(p.Links) > 0 {
					for _, link := range p.Links {
						<a href={ link.URL } class="text-xl font-medium transition-colors page-link font-display text-secondary-300 hover:text-primary-400">{ link.Label }</a>
					}
				}
			</div>
			<div class="flex flex-col items-end gap-4">
				if len(p.Account) > 0 {
					for _, link := range p.Account {
						<a href={ link.URL } class="text-lg font-medium transition-colors account-link font-display text-secondary-300 hover:text-primary-400">{ link.Label }</a>
					}
				}
			</div>
		</div>
	</expandedNavMenu>
}

templ CTA(p *NavbarProps) {
	if p.CTA != nil {
		<cta class="overflow-hidden whitespace-nowrap">
			<button
				class="px-2 py-1 text-sm font-medium transition-colors rounded cursor-pointer bg-primary-501 text-base-500 hover:bg-primary-401"
				hx-get={ p.CTA.URL }
				tabindex="-1"
			>
				{ p.CTA.Label }
			</button>
		</cta>
	}
}
